#!/usr/bin/env node


/* eslint no-process-exit:0 */

"use strict";

var _require = require("shelljs");

var exec = _require.exec;

var program = require("commander");
var p = require("../package.json");

var _require2 = require("fs");

var mkdirSync = _require2.mkdirSync;
var writeFileSync = _require2.writeFileSync;
var readFileSync = _require2.readFileSync;

var _require3 = require("path");

var join = _require3.join;

var storeDir = join(process.env.HOME, ".iptr");
var itemList = join(storeDir, "items.json");

var getitemFile = function getitemFile() {
	return JSON.parse(readFileSync(itemList, "utf8"));
};

var itemFilter = function itemFilter(pfile, item) {
	return pfile.filter(function (proj) {
		return proj.name === item;
	});
};

var itemExists = function itemExists(pfile, item) {
	return itemFilter(pfile, item).length > 0;
};

var getitem = function getitem(pfile, item) {
	return itemExists(pfile, item) ? itemFilter(pfile, item)[0] : false;
};

var versionExists = function versionExists(item, version) {
	return item.hasOwnProperty("versions") ? Object.keys(item.versions).filter(function (k) {
		return k === version;
	}).length > 0 : false;
};

var saveitemFile = function saveitemFile(pfile) {
	return writeFileSync(itemList, JSON.stringify(pfile));
};

var ipfsAdd = function ipfsAdd(path) {

	console.log("adding " + path);

	var res = exec("ipfs add -r " + path);

	if (res.code === 0) {

		var lines = res.output.split(/\r?\n/);
		var lastLine = lines[lines.length - 2];

		return lastLine.split(" ")[1];
	}
};

var init = function init() {

	try {
		mkdirSync(storeDir);
		writeFileSync(itemList, "[]");
		return true;
	} catch (e) {

		process.stdout.write(e.message);
		process.exit(1);
	}
};

var additem = function additem(itemName) {

	var pfile = getitemFile();

	var exists = itemExists(pfile, itemName);

	if (!exists) {

		pfile.push({
			name: itemName,
			versions: {}
		});

		writeFileSync(itemList, JSON.stringify(pfile), "utf8");
		console.log(itemName + " added to list of projcets");
	} else {

		console.log("item " + itemName + " already tracked");
	}
};

var addVersion = function addVersion(itemName, pathName, version) {

	var pfile = getitemFile();

	if (!itemExists(pfile, itemName)) {
		additem(itemName);
	}

	var item = getitem(pfile, itemName);

	if (versionExists(item, version)) {

		console.log("version " + version + "is already published at " + item.versions[version]);
		process.exit(1);
	} else {

		console.log("creating version");
		var hash = ipfsAdd(pathName);

		if (!item.hasOwnProperty("versions")) {

			item.versions = {};
		}

		console.log("object hash: " + hash);
		item.versions[version] = hash;
		saveitemFile(pfile);
	}
};

program.version(p.version);

program.command("init").description("initialise your item storage").action(init);

program.command("add <itemname> <pathname> <version>").description("publish a new item version to ipfs").action(addVersion);

program.command("open <itemname> [versionname]", "open the latest version of a item, or a specific" + "version, in your browser").action(function () {});

program.command("list [itemname]", "without [itemname], list your items, with" + " [itemname], list the published versions of that" + " item").action(function () {});

program.command("publish", "generate a HTML page which lists all of your" + " stored items and publish it under your ipns").action(function () {});

program.parse(process.argv);
