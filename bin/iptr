#!/usr/bin/env node


/* eslint no-process-exit:0 */

"use strict";

var _require = require("shelljs");

var exec = _require.exec;

var program = require("commander");
var p = require("../package.json");

var _require2 = require("fs");

var mkdirSync = _require2.mkdirSync;
var writeFileSync = _require2.writeFileSync;
var readFileSync = _require2.readFileSync;

var _require3 = require("path");

var join = _require3.join;

var R = require("ramda");
var request = require("superagent");

var storeDir = join(process.env.HOME, ".iptr");
var itemList = join(storeDir, "items.json");
var htmlFile = join(storeDir, "index.html");

var getItemFile = function getItemFile() {
  return JSON.parse(readFileSync(itemList, "utf8"));
};

var itemFilter = function itemFilter(pfile, item) {
  return pfile.filter(function (proj) {
    return proj.name === item;
  });
};

var itemExists = function itemExists(pfile, item) {
  return itemFilter(pfile, item).length > 0;
};

var getItem = function getItem(pfile, item) {
  return itemExists(pfile, item) ? itemFilter(pfile, item)[0] : false;
};

var versionExists = function versionExists(item, version) {
  return item.hasOwnProperty("versions") ? Object.keys(item.versions).filter(function (k) {
    return k === version;
  }).length > 0 : false;
};

var saveitemFile = function saveitemFile(pfile) {
  return writeFileSync(itemList, JSON.stringify(pfile));
};

var makeLink = function makeLink(hash) {
  return "http://ipfs.io/ipfs/" + hash;
};

var ipfsAdd = function ipfsAdd(path) {

  console.log("adding " + path);

  var res = exec("ipfs add -r " + path);

  if (res.code === 0) {

    var lines = res.output.split(/\r?\n/);
    var lastLine = lines[lines.length - 2];

    return lastLine.split(" ")[1];
  }
};

var init = function init() {

  try {
    mkdirSync(storeDir);
    writeFileSync(itemList, "[]");
    return true;
  } catch (e) {

    process.stdout.write(e.message);
    process.exit(1);
  }
};

var additem = function additem(itemName) {

  var pfile = getItemFile();

  var exists = itemExists(pfile, itemName);

  if (!exists) {

    var item = {
      name: itemName,
      versions: {}
    };
    pfile.push(item);

    writeFileSync(itemList, JSON.stringify(pfile), "utf8");
    console.log(itemName + " added to list of projcets");

    return pfile;
  } else {

    console.log("item " + itemName + " already tracked");
  }
};

var addVersion = function addVersion(itemName, pathName, version) {

  var pfile = getItemFile();

  if (!itemExists(pfile, itemName)) {

    pfile = additem(itemName);
  }

  var item = getItem(pfile, itemName);

  if (versionExists(item, version)) {

    console.log("version " + version + "is already published at " + item.versions[version]);
    process.exit(1);
  } else {

    console.log("creating version");
    var hash = ipfsAdd(pathName);

    if (item && !item.hasOwnProperty("versions")) {

      item.versions = {};
    }

    console.log("object hash: " + hash);
    item.versions[version] = hash;
    saveitemFile(pfile);
  }
};

var open = function open(itemname, versionname) {

  var file = getItemFile();

  if (itemExists(file, itemname)) {
    var i = getItem(file, itemname);

    if (versionExists(i, versionname)) {

      var hash = i.versions[versionname];

      console.log("opening " + hash);

      exec("open " + makeLink(hash));
    } else {

      console.log("version doesn't exist");
    }
  } else {

    console.log("unable to find item " + itemname);
  }
};

var publish = function publish() {

  var html = ["<!DOCTYPE html>", "<html>", "<head></head>", "<body>"];

  var file = getItemFile();

  file.forEach(function (i) {

    Object.keys(i.versions).forEach(function (v) {

      html.push("<a href='" + makeLink(i.versions[v]) + "'>" + i.name + " version: " + v + "</a>");
    });
  });

  html.push("</body>", "</html>");

  writeFileSync(htmlFile, html.join(""));

  var hash = ipfsAdd(htmlFile);

  console.log("publishing...this can take a bit");
  request("http://localhost:5001/api/v0/name/publish?arg=" + hash).end(function (err, res) {
    console.log("published to ipns/", res.body.Name);
  });
};

program.version(p.version);

program.command("init").description("initialise your item storage").action(init);

program.command("add <itemname> <pathname> <version>").description("publish a new item version to ipfs").action(addVersion);

program.command("open <itemname> [versionname]").description("open the latest version of a item, or a specific" + "version, in your browser").action(open);

program.command("list [itemname]", "without [itemname], list your items, with" + " [itemname], list the published versions of that" + " item").action(function () {});

program.command("publish").description("generate a HTML page which lists all of your" + " stored items and publish it under your ipns").action(publish);

program.parse(process.argv);
