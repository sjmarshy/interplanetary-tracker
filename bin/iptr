#!/usr/bin/env node


/* eslint no-process-exit:0 */

"use strict";

var program = require("commander");
var p = require("../package.json");

var _require = require("fs");

var mkdirSync = _require.mkdirSync;
var writeFileSync = _require.writeFileSync;
var readFileSync = _require.readFileSync;

var _require2 = require("path");

var join = _require2.join;

var ipfsApi = require("ipfs-api");

var storeDir = join(process.env.HOME, ".iptr");
var itemList = join(storeDir, "items.json");

var ipfs = ipfsApi("localhost", "5001");

var getitemFile = function getitemFile() {
		return JSON.parse(readFileSync(itemList, "utf8"));
};

var itemFilter = function itemFilter(pfile, item) {
		return pfile.filter(function (proj) {
				return proj.name === item;
		});
};

var itemExists = function itemExists(pfile, item) {
		return itemFilter(pfile, item) > 0;
};

var getitem = function getitem(pfile, item) {
		return itemExists(pfile, item) ? itemFilter(pfile, item)[0] : false;
};

var versionExists = function versionExists(item, version) {
		return item.versions.filter(function (k) {
				return k === version;
		}).length > 0;
};

var saveitemFile = function saveitemFile(pfile) {
		return writeFileSync(itemList, JSON.stringify(pfile));
};

var ipfsAdd = function ipfsAdd(path) {
		return new Promise(function (resolve, reject) {

				ipfs.add(path, function (err, res) {

						if (err) {
								return reject(err);
						}

						return resolve(res[0].Hash);
				});
		});
};

var init = function init() {

		try {
				mkdirSync(storeDir);
				writeFileSync(itemList, "[]");
				return true;
		} catch (e) {

				process.stdout.write(e.message);
				process.exit(1);
		}
};

var additem = function additem(itemName) {

		var pfile = getitemFile();

		var exists = itemExists(pfile, itemName);

		if (exists) {

				pfile.push({
						name: itemName,
						versions: {}
				});

				writeFileSync(itemList, JSON.stringify(pfile), "utf8");
				console.log(itemName + " added to list of projcets");
		} else {

				console.log("item " + itemName + " already tracked");
		}
};

var addVersion = function addVersion(itemName, pathName, version) {

		var pfile = getitemFile();

		if (!itemExists(pfile, itemName)) {
				additem(itemName);
		}

		var item = getitem(pfile, itemName);

		if (versionExists(item, version)) {

				console.log("version " + version + "is already published at " + item[version]);
				process.exit(1);
		} else {

				ipfsAdd(pathName).then(function (hash) {

						item[version] = hash;
						console.log(hash);
						saveitemFile(pfile);
				})["catch"](function (err) {

						console.log(err);
						process.exit(1);
				});
		}
};

program.version(p.version);

program.command("init").description("initialise your item storage").action(init);

program.command("add <itemname> <pathname> <version>").description("publish a new item version to ipfs").action(addVersion);

program.command("open <itemname> [versionname]", "open the latest version of a item, or a specific" + "version, in your browser").action(function () {});

program.command("list [itemname]", "without [itemname], list your items, with" + " [itemname], list the published versions of that" + " item").action(function () {});

program.command("publish", "generate a HTML page which lists all of your" + " stored items and publish it under your ipns").action(function () {});

program.parse(process.argv);
